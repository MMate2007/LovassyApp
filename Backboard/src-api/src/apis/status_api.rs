/*
 * Blueboard
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_status_notify_on_reset_key_password_set_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiStatusNotifyOnResetKeyPasswordSetPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_status_service_status_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiStatusServiceStatusGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_status_version_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiStatusVersionGetError {
    Status418(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}


pub async fn api_status_notify_on_reset_key_password_set_post(configuration: &configuration::Configuration, status_notify_on_reset_key_password_set_request_body: Option<models::StatusNotifyOnResetKeyPasswordSetRequestBody>) -> Result<(), Error<ApiStatusNotifyOnResetKeyPasswordSetPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_status_notify_on_reset_key_password_set_request_body = status_notify_on_reset_key_password_set_request_body;

    let uri_str = format!("{}/Api/Status/NotifyOnResetKeyPasswordSet", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_status_notify_on_reset_key_password_set_request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiStatusNotifyOnResetKeyPasswordSetPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_status_service_status_get(configuration: &configuration::Configuration, ) -> Result<models::StatusViewServiceStatusResponse, Error<ApiStatusServiceStatusGetError>> {

    let uri_str = format!("{}/Api/Status/ServiceStatus", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StatusViewServiceStatusResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StatusViewServiceStatusResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiStatusServiceStatusGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_status_version_get(configuration: &configuration::Configuration, send_ok: bool, send_motd: bool) -> Result<models::StatusViewVersionResponse, Error<ApiStatusVersionGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_send_ok = send_ok;
    let p_query_send_motd = send_motd;

    let uri_str = format!("{}/Api/Status/Version", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("SendOk", &p_query_send_ok.to_string())]);
    req_builder = req_builder.query(&[("SendMOTD", &p_query_send_motd.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StatusViewVersionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StatusViewVersionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiStatusVersionGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

