/*
 * Blueboard
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_auth_control_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthControlGetError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_login_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthLoginPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_logout_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthLogoutDeleteError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_refresh_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthRefreshPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_resend_verify_email_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthResendVerifyEmailPostError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_reset_password_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthResetPasswordPostError {
    Status404(models::ProblemDetails),
    Status400(models::ProblemDetails),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_send_password_reset_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthSendPasswordResetPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_verify_email_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthVerifyEmailPostError {
    Status404(models::ProblemDetails),
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}


/// Requires one of the following permissions: Auth.Control
pub async fn api_auth_control_get(configuration: &configuration::Configuration, ) -> Result<models::AuthViewControlResponse, Error<ApiAuthControlGetError>> {

    let uri_str = format!("{}/Api/Auth/Control", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthViewControlResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthViewControlResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthControlGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_auth_login_post(configuration: &configuration::Configuration, auth_login_request_body: Option<models::AuthLoginRequestBody>) -> Result<models::AuthLoginResponse, Error<ApiAuthLoginPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_auth_login_request_body = auth_login_request_body;

    let uri_str = format!("{}/Api/Auth/Login", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_auth_login_request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthLoginResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthLoginResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthLoginPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_auth_logout_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ApiAuthLogoutDeleteError>> {

    let uri_str = format!("{}/Api/Auth/Logout", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthLogoutDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_auth_refresh_post(configuration: &configuration::Configuration, token: Option<&str>) -> Result<models::AuthRefreshResponse, Error<ApiAuthRefreshPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_token = token;

    let uri_str = format!("{}/Api/Auth/Refresh", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_query_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthRefreshResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthRefreshResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthRefreshPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Requires unverified email
pub async fn api_auth_resend_verify_email_post(configuration: &configuration::Configuration, verify_url: Option<&str>, verify_token_query_key: Option<&str>) -> Result<(), Error<ApiAuthResendVerifyEmailPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_verify_url = verify_url;
    let p_query_verify_token_query_key = verify_token_query_key;

    let uri_str = format!("{}/Api/Auth/ResendVerifyEmail", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_query_verify_url {
        req_builder = req_builder.query(&[("verifyUrl", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_verify_token_query_key {
        req_builder = req_builder.query(&[("verifyTokenQueryKey", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthResendVerifyEmailPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_auth_reset_password_post(configuration: &configuration::Configuration, password_reset_token: Option<&str>, auth_reset_password_request_body: Option<models::AuthResetPasswordRequestBody>) -> Result<(), Error<ApiAuthResetPasswordPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_password_reset_token = password_reset_token;
    let p_body_auth_reset_password_request_body = auth_reset_password_request_body;

    let uri_str = format!("{}/Api/Auth/ResetPassword", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_query_password_reset_token {
        req_builder = req_builder.query(&[("passwordResetToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_auth_reset_password_request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthResetPasswordPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_auth_send_password_reset_post(configuration: &configuration::Configuration, password_reset_url: Option<&str>, password_reset_token_query_key: Option<&str>, auth_send_password_reset_request_body: Option<models::AuthSendPasswordResetRequestBody>) -> Result<(), Error<ApiAuthSendPasswordResetPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_password_reset_url = password_reset_url;
    let p_query_password_reset_token_query_key = password_reset_token_query_key;
    let p_body_auth_send_password_reset_request_body = auth_send_password_reset_request_body;

    let uri_str = format!("{}/Api/Auth/SendPasswordReset", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_query_password_reset_url {
        req_builder = req_builder.query(&[("passwordResetUrl", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_password_reset_token_query_key {
        req_builder = req_builder.query(&[("passwordResetTokenQueryKey", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_auth_send_password_reset_request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthSendPasswordResetPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_auth_verify_email_post(configuration: &configuration::Configuration, verify_token: Option<&str>) -> Result<(), Error<ApiAuthVerifyEmailPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_verify_token = verify_token;

    let uri_str = format!("{}/Api/Auth/VerifyEmail", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_query_verify_token {
        req_builder = req_builder.query(&[("verifyToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthVerifyEmailPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

